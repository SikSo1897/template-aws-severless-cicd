name: CI/CD Pipeline
on:
  push:
    branches:
      - main
jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "poetry"

      - name: Install dependencies
        run: poetry install

      - name: Run pytest
        run: poetry run pytest

      - name: Site-packes Zip
        run: |
          find `poetry env info -p` -type d -name 'site-packages' -print | xargs -I % cp -R % .
          mv site-packages python
          zip -r python.zip python
          unzip -l python.zip
      
      - name: Application Zip
        run: |
          zip -r app.zip app
          unzip -l app.zip
      
      - name: Executable files Zip
        run: |
          cp -R layer/bin .
          zip -r bin.zip bin
          unzip -l bin.zip

      - name: Upload Zip file artifact
        uses: actions/upload-artifact@v3
        with:
          name: zip-files
          path: |
            bin.zip
            python.zip
            app.zip

  continuous-deployment:
    runs-on: ubuntu-latest
    needs: 
      - continuous-integration
      
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }} 
        
      - name: Check aws cli
        run: aws --version

      - name: Download Lambda api.zip
        uses: actions/download-artifact@v3
        with:
          name: zip-files
          
      - name: Display structure of downloaded files
        run: |
          ls -R
          find . -name "*.zip" -exec unzip -l {} \;

      - name: Upload to S3
        run: |
          aws s3 cp . s3://${{secrets.AWS_S3_BUCKET}}/ \
            --recursive --exclude "*" --include "*.zip"

      - name: Check Bucket files
        run: |
          aws s3 ls s3://${{secrets.AWS_S3_BUCKET}} 
      
      - name: Deploy Lambda layer (Python Packages)
        run: |
          aws lambda publish-layer-version \
            --layer-name layer-python --description "Python packages" \
            --license-info "MIT" \
            --compatible-runtimes python3.6 python3.7 python3.8 \
            --compatible-architectures "x86_64" \
            --content S3Bucket=${{secrets.AWS_S3_BUCKET}},S3Key=python.zip \
            --query "LayerVersionArn" | read LayerVersionArnPython
          echo ${{env.LayerVersionArnPython}}

      - name: Deploy Lambda layer (Executable files)
        run: |
          aws lambda publish-layer-version \
            --layer-name layer-chromium --description "Executable files" \
            --license-info "MIT" \
            --compatible-runtimes python3.6 python3.7 python3.8 \
            --compatible-architectures "arm64" "x86_64" \
            --content S3Bucket=${{secrets.AWS_S3_BUCKET}},S3Key=bin.zip \
            --query "LayerVersionArn" | read LayerVersionArnChromium
          echo ${{env.LayerVersionArnChromium}}
      
      - name: Update Lambda Layer
        run: |
          echo "arn: $LayerVersionArnPython $LayerVersionArnPython"
          aws lambda update-function-configuration \
            --function-name ${{secrets.AWS_FUNCTION_NAME}} \
            --layers \
              ${{env.LayerVersionArnPython}} \
              ${{env.LayerVersionArnChromium}}

      - name: Deploy Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name ${{secrets.AWS_FUNCTION_NAME}} \
            --s3-bucket ${{secrets.AWS_S3_BUCKET}} \
            --s3-key app.zip 