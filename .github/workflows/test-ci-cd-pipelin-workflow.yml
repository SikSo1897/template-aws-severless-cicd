name: CI/CD Pipeline
on:
  push:
    branches:
      - develop
      - feature/**
    
jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "poetry"

      - name: Install dependencies
        run: poetry install
        
      - name: Run pytest
        run: |
          ls -lh
          poetry run pytest

  compression-dependencies:
    name: Compression Dependencies
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "poetry"

      - name: Install product dependencies 
        run: |
          poetry install --only main
      
      - name: Get specific changed files
        id: changed-files-specific
        uses: tj-actions/changed-files@v34
        with:
          files: |
            poetry.lock
            pyproject.toml

      - name: Site-packages Zip
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: |
          find `poetry env info -p` -type d -name 'site-packages' -print | xargs -I % cp -R % .
          mv site-packages python
          zip -r python.zip python
          unzip -l python.zip
          ls -lh python
      
      - name: Upload Site-packages Zip
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: Dependencies
          path: |
            python.zip
  
  compression-executable:
    name: Compression Executable files
    needs: integration
    runs-on: ubuntu-latest
    steps:      
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Get specific changed files (Executable files)
        id: changed-files-specific
        uses: tj-actions/changed-files@v34
        with:
          files: |
            layer/bin/**      

      - name: Executable files Zip
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: |
          cp -R layer/bin .
          zip -r bin.zip bin
          unzip -l bin.zip
          ls -lh bin  

      - name: Upload Zip file artifact
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: Executable files
          path: |
            bin.zip

  compression-application:
    name: Compression Application
    needs: integration
    runs-on: ubuntu-latest
    steps:      
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Get specific changed files (Application)
        id: changed-files-specific
        uses: tj-actions/changed-files@v34
        with:
          files: |
            app/**      

      - name: Application Zip
        run: |
          zip -r app.zip app
          unzip -l app.zip
          ls -lh app

      - name: Upload Zip file artifact
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: Application
          path: |
            app.zip
  
  deployment-s3:
    name: S3 files Upload
    needs: [compression-dependencies, compression-executable, compression-application]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}     

      - name: Download Artifact
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: |
          ls -R
          find . -name "*.zip" -exec unzip -l {} \;

      - name: Upload to S3
        run: |
          aws s3 cp . s3://${{secrets.AWS_S3_BUCKET}}/ \
            --recursive --exclude "*" --include "*.zip"

  deployment-application:
    name: Deploy - Application
    runs-on: ubuntu-latest
    needs: deployment-s3
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }} 

      - name: Checking Artifact - Application      
        uses: xSAVIKx/artifact-exists-action@v0
        id: check_artifact
        with:
          name: 'Application'

      - name: Deploy Lambda Function
        if: steps.check_coverage_artifact.outputs.exists == 'true'
        run: |
          aws lambda update-function-code \
            --function-name ${{secrets.AWS_FUNCTION_NAME}} \
            --s3-bucket ${{secrets.AWS_S3_BUCKET}} \
            --s3-key app.zip
      
      - name: Unchanged file
        if: steps.check_coverage_artifact.outputs.exists == 'true'
        run: |
          echo "Unchanged Application"

  deployment-layer-dependencies:
    name: Deploy Layer - Dependencies
    runs-on: ubuntu-latest
    needs: deployment-s3
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}         
      
      - name: Checking Artifact - Dependencies      
        uses: xSAVIKx/artifact-exists-action@v0
        id: check_artifact
        with:
          name: Dependencies
      
      - name: Deploy Lambda layer (Python Packages)
        if: steps.check_coverage_artifact.outputs.exists == 'true'
        run: |
          aws lambda publish-layer-version \
            --layer-name layer-python --description "Python packages" \
            --license-info "MIT" \
            --compatible-runtimes python3.6 python3.7 python3.8 \
            --compatible-architectures "x86_64" \
            --content S3Bucket=${{secrets.AWS_S3_BUCKET}},S3Key=python.zip \
            --query "LayerVersionArn" --output text
      
      - name: Unchanged file
        if: steps.check_coverage_artifact.outputs.exists == 'true'
        run: |
          echo "Unchanged Dependencies"

  deployment-layer-executable:
    name: Deploy Layer - Executable files
    runs-on: ubuntu-latest
    needs: deployment-s3
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}         
      
      - name: Checking Artifact - Executable files      
        uses: xSAVIKx/artifact-exists-action@v0
        id: check_artifact
        with:
          name: Executable files
      
      - name: Deploy Lambda layer (Python Packages)
        if: steps.check_coverage_artifact.outputs.exists == 'true'
        run: |
          aws lambda publish-layer-version \
            --layer-name layer-chromium --description "Executable files" \
            --license-info "MIT" \
            --compatible-runtimes python3.6 python3.7 python3.8 \
            --compatible-architectures "arm64" "x86_64" \
            --content S3Bucket=${{secrets.AWS_S3_BUCKET}},S3Key=bin.zip \
            --query "LayerVersionArn" --output text
      
      - name: Unchanged file
        if: steps.check_coverage_artifact.outputs.exists == 'true'
        run: |
          echo "Unchanged Executable files"

  deployment-application-configuration:
    name: Deploy - configuration
    runs-on: ubuntu-latest
    needs: [deployment-layer-dependencies, deployment-layer-executable]
    env:
      lambda_memory_size: 512
      handler: app.main.handler
      timeout: 30
    steps: 
      - name: Checkout repository

        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}     
      
      - name: Get Lambda layer (Python Packages)
        run: |
          aws lambda list-layer-versions \
            --layer-name layer-python \
            --query LayerVersions[0].LayerVersionArn \
            --output text | xargs -I % echo "pythonLayerVersionArn=%" >> $GITHUB_ENV
      
      - name: Get Lambda layer (Executable files)
        run: |
         aws lambda list-layer-versions \
          --layer-name layer-chromium \
          --query LayerVersions[0].LayerVersionArn \
          --output text | xargs -I % echo "chromiumLayerVersionArn=%" >> $GITHUB_ENV            
      
      - name: Update Lambda configuration
        run: |
          aws lambda update-function-configuration \
            --function-name ${{secrets.AWS_FUNCTION_NAME}} \
            --memory-size ${{env.lambda_memory_size}} \
            --handler ${{env.handler}} \
            --timeout ${{env.timeout}} \
            --layers \
              ${{env.pythonLayerVersionArn}} \
              ${{env.chromiumLayerVersionArn}}          